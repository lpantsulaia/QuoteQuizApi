// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuoteQuizApi;

#nullable disable

namespace QuoteQuizApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220303202201_isDisabledADded")]
    partial class isDisabledADded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataModels.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDisabled = false,
                            PasswordHash = new byte[] { 153, 30, 120, 147, 143, 78, 134, 34, 169, 181, 232, 21, 215, 178, 83, 214, 115, 67, 82, 92, 102, 234, 27, 133, 79, 102, 80, 34, 226, 9, 47, 238, 144, 115, 198, 199, 177, 44, 68, 158, 172, 81, 99, 64, 63, 8, 26, 193, 56, 61, 0, 159, 96, 5, 53, 102, 57, 39, 8, 207, 204, 84, 11, 46 },
                            PasswordSalt = new byte[] { 137, 71, 182, 146, 79, 243, 170, 47, 97, 154, 71, 208, 27, 219, 115, 212, 32, 58, 226, 58, 150, 34, 148, 214, 133, 163, 232, 108, 87, 245, 85, 60, 103, 98, 19, 133, 144, 11, 67, 95, 91, 88, 83, 106, 216, 184, 33, 92, 64, 0, 97, 72, 236, 89, 16, 172, 93, 36, 249, 218, 131, 32, 28, 147, 38, 166, 63, 158, 237, 236, 106, 91, 239, 41, 124, 139, 64, 126, 25, 23, 161, 34, 235, 115, 41, 195, 129, 148, 204, 236, 178, 41, 115, 24, 82, 127, 109, 216, 183, 105, 234, 221, 87, 191, 0, 5, 218, 4, 211, 203, 252, 109, 175, 108, 250, 149, 249, 147, 46, 212, 18, 88, 46, 209, 169, 171, 161, 89 },
                            UserName = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
